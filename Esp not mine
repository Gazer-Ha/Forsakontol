local Players = cloneref(game:GetService("Players"))
local RunService = cloneref(game:GetService("RunService"))
local Workspace = cloneref(game:GetService("Workspace"))
local StarterGui = cloneref(game:GetService("StarterGui"))

local function createTextLabel(tool)
    if tool:FindFirstChild("ToolNameLabel") then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ToolNameLabel"
    billboard.Adornee = tool
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = math.huge

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = tool.Name
    textLabel.TextColor3 = Color3.new(1, 1, 1)
    textLabel.TextSize = UDim2.new(1, 0, 1, 0)
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.Parent = billboard

    billboard.Parent = tool
end

local function applyOutline(tool)
    if not tool:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.FillColor = Color3.new(1, 1, 0)
        highlight.OutlineColor = Color3.new(1, 0, 0)
        highlight.Parent = tool
    end
    createTextLabel(tool)
end

for _, obj in Workspace:GetDescendants() do
    if obj:IsA("Tool") then
        applyOutline(obj)
    end
end

Workspace.DescendantAdded:Connect(function(obj)
    if obj:IsA("Tool") then
        applyOutline(obj)
    end
end)

StarterGui:SetCore("SendNotification", {Title = "Item Esp"; Text = "Loaded!"; Duration = 5})

local function createOutlineESP(model, outlineColor, fillColor)
    if model and not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = model
        highlight.Adornee = model
        highlight.FillTransparency = 0.75
        highlight.FillColor = fillColor
        highlight.OutlineColor = outlineColor
        highlight.OutlineTransparency = 0 
    end
end

local function createHealthIndicator(character, textColor)
    local head = character:FindFirstChild("Head")
    if head and not head:FindFirstChild("HealthGui") then
        local healthGui = Instance.new("BillboardGui")
        healthGui.Name = "HealthGui"
        healthGui.Size = UDim2.new(0, 100, 0, 30)
        healthGui.AlwaysOnTop = true
        healthGui.MaxDistance = math.huge
        healthGui.Parent = head

        local healthLabel = Instance.new("TextLabel")
        healthLabel.Size = UDim2.new(1, 0, 1, 0)
        healthLabel.BackgroundTransparency = 1
        healthLabel.TextScaled = true
        healthLabel.Text = ""
        healthLabel.TextColor3 = textColor
        healthLabel.Font = Enum.Font.SourceSansBold
        healthLabel.Parent = healthGui
    end
end

local function updateHealthIndicators()
    for _, player in Players:GetPlayers() do
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            local head = character:FindFirstChild("Head")
            if humanoid and head then
                local textColor = humanoid.MaxHealth > 500 and Color3.new(1, 0, 0) or Color3.new(1, 1, 1)
                createHealthIndicator(character, textColor)
                
                local healthGui = head:FindFirstChild("HealthGui")
                if healthGui then
                    local healthLabel = healthGui:FindFirstChildOfClass("TextLabel")
                    if healthLabel then
                        healthLabel.Text = math.floor(humanoid.Health) .. "/" .. humanoid.MaxHealth
                        healthLabel.TextColor3 = textColor
                    end
                end
            end
        end
    end
end

local function createOutlineESPForGroup(group, outlineColor, fillColor)
    if group then
        for _, obj in group:GetChildren() do
            local humanoid = obj:FindFirstChildOfClass("Humanoid")
            local rootPart = obj:FindFirstChild("HumanoidRootPart")
            if humanoid and rootPart then
                createOutlineESP(obj, outlineColor, fillColor)
            end
        end
    end
end

local function highlightGenerators()
    for _, obj in workspace:GetDescendants() do
        if obj:IsA("Model") and obj.Name == "Generator" then
            createOutlineESP(obj, Color3.new(1, 1, 0), Color3.new(1, 1, 0.5))
        end
    end
end

local function updateESP()
    while true do
        local players = Players:GetPlayers()

        for _, player in players do
            local character = player.Character
            if character then
                for _, obj in character:GetChildren() do
                    if obj:IsA("Highlight") then
                        obj:Destroy()
                    end
                end

                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    if humanoid.MaxHealth > 500 then
                        createOutlineESP(character, Color3.new(1, 0, 0), Color3.new(1, 0.5, 0.5))
                        createHealthIndicator(character, Color3.new(1, 0, 0))
                    else
                        createOutlineESP(character, Color3.new(0.5, 0.5, 0.5), Color3.new(0.7, 0.7, 0.7))
                        createHealthIndicator(character, Color3.new(1, 1, 1))
                    end
                end
            end
        end

        updateHealthIndicators()
        highlightGenerators()
        
        task.wait(3)
    end
end

StarterGui:SetCore("SendNotification", {Title = "Esp"; Text = "Loaded!"; Duration = 20})
updateESP()
