local cref = cloneref or function(ref) return ref end
local ts = cref(game:GetService("TweenService"))
local ws = cref(workspace)

local gens, hl = {}, {}

local function getColors(p)
    local progress = math.clamp(p / 100, 0, 1)
    
    -- Color transition logic:
    local fillColor
    if progress < 1 then
        fillColor = Color3.new(1, progress, 0) -- Red (1,0,0) to Yellow (1,1,0)
    else
        fillColor = Color3.new(0, 1, 0) -- Green (0,1,0) at 100%
    end
    
    local outlineColor = fillColor:Lerp(Color3.new(0, 0, 0), 0.3) -- Slightly darker outline

    return fillColor, outlineColor
end

local function updateHL(gen)
    local prog, h = gen:FindFirstChild("Progress"), hl[gen]
    if prog and h then
        local f, o = getColors(prog.Value)
        local speed = math.clamp(1 - (prog.Value / 100), 0.2, 0.5)
        
        local tf = ts:Create(h, TweenInfo.new(speed, Enum.EasingStyle.Linear), {FillColor = f})
        local to = ts:Create(h, TweenInfo.new(speed, Enum.EasingStyle.Linear), {OutlineColor = o})
        tf:Play()
        to:Play()
        
        tf.Completed:Connect(function()
            tf:Destroy()
            to:Destroy()
        end)
    end
end

local function monitorProgress(gen)
    local prog = gen:FindFirstChild("Progress")
    if not prog then return end

    -- Constantly check for changes every 0.1 seconds
    task.spawn(function()
        while gens[gen] and prog do
            updateHL(gen)
            task.wait(0.1) -- Fast detection
        end
    end)
end

local function addGen(obj)
    if obj:IsA("Model") and obj.Name == "Generator" and not gens[obj] then
        gens[obj] = true
        local h = Instance.new("Highlight", obj)
        h.Adornee, hl[obj] = obj, h
        local f, o = getColors(1)
        h.FillColor, h.OutlineColor = f, o
        local prog = obj:FindFirstChild("Progress")
        if prog and prog:IsA("NumberValue") then
            monitorProgress(obj) -- Start the manual detection loop
            updateHL(obj)
        end
    end
end

local function removeGen(obj)
    if gens[obj] then
        gens[obj] = nil
        if hl[obj] then hl[obj]:Destroy() hl[obj] = nil end
    end
end

local function validateGenerators()
    local m = ws:FindFirstChild("Map")
    local gm = m and m:FindFirstChild("Ingame") and m.Ingame:FindFirstChild("Map")
    
    if gm then
        -- Add missing generators
        for _, obj in ipairs(gm:GetChildren()) do
            if obj:IsA("Model") and obj.Name == "Generator" and not gens[obj] then
                addGen(obj)
            end
        end
        
        -- Remove invalid generators
        for obj in pairs(gens) do
            if not obj or not obj.Parent or obj.Parent ~= gm then
                removeGen(obj)
            end
        end
    end
end

-- Loop to continuously check for new or missing generators
task.spawn(function()
    while true do
        validateGenerators()
        task.wait(1) -- Check every 1 second
    end
end)
